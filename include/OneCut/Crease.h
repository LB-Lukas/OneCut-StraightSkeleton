#pragma once

#include <utility>

#include "StraightSkeletonTypes.h"

namespace OneCut {

/**
 * @namespace OneCut
 * @brief Namespace containing types and utilities related to one-cut origami straight skeleton computations.
 */

/**
 * @enum Origin
 * @brief Specifies the origin type of a crease in the straight skeleton computation.
 *
 * This enumeration distinguishes between creases originating from the original polygon,
 * the straight skeleton computation process, or perpendicular folds.
 */
enum class Origin {
    POLYGON,      /**< Originates from the original polygon boundary. */
    SKELETON,     /**< Generated by the straight skeleton algorithm. */
    PERPENDICULAR /**< Created by a perpendicular fold operation. */
};

/**
 * @enum FoldType
 * @brief Specifies the folding direction of a crease.
 *
 * This enumeration describes whether a crease represents a mountain fold, valley fold,
 * or remains unfolded.
 */
enum class FoldType {
    MOUNTAIN, /**< Crease is folded upwards (mountain direction). */
    VALLEY,   /**< Crease is folded downwards (valley direction). */
    UNFOLDED  /**< Crease is not folded (e.g., a boundary or reference edge). */
};

/**
 * @struct Crease
 * @brief Represents a crease (edge) in the straight skeleton or folded structure.
 *
 * A crease is defined by its geometric edge, folding behavior, origin, and topological indices.
 */
struct Crease {
    std::pair<Point, Point> edge; /**< @brief Line segment representing the crease's geometry. */
    FoldType foldType;            /**< @brief Fold direction (mountain, valley, or unfolded). */
    Origin origin;                /**< @brief Origin of the crease (polygon, skeleton, etc.). */
    int faceIndex;                /**< @brief Index of the associated face in the skeleton. */
    int edgeIndex;                /**< @brief Index of the edge within its face. */
    bool isBoundaryEdge;          /**< @brief True if the crease is part of the polygon's boundary. */
};

}  // namespace OneCut